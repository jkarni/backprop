name: Haskell Stack Project CI

on:
  push:
  schedule:
  - cron: "0 0 * * 1"


jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        # use this to specify what resolvers and ghc to use
        plan:
        - { build: stack, resolver: "--resolver lts-12"  }
        - { build: stack, resolver: "--resolver lts-14"  }
        - { build: stack, resolver: "--resolver nightly" }
        - { build: stack, resolver: ""                   }
        - { build: cabal, ghc: 8.4.4, cabal-install: "2.2" }
        - { build: cabal, ghc: 8.6.5, cabal-install: "2.4" }
        - { build: cabal, ghc: 8.8.1, cabal-install: "2.4" }
        # use this to include any dependencies from OS package managers
        include:
        # - os: macOS-latest
        #   brew: anybrewdeps
        - os: ubuntu-latest
          apt-get: libblas-dev liblapack-dev

        exclude:
        - os: macOS-latest
          plan:
            build: cabal

    runs-on: ${{ matrix.os }}
    steps:
    - name: Install OS Packages
      uses: mstksg/get-package@master
      with:
        apt-get: ${{ matrix.apt-get }}
        brew: ${{ matrix.brew }}
    - uses: actions/checkout@v1

    - name: Setup stack
      uses: mstksg/setup-stack@v1


    # - name: Setup stack.yaml.lock
    #   run: |
    #     stack --no-terminal $ARGS --lock-file read-write setup
    #     # echo $HOME
    #     # cat "stack.yaml.lock"
    #     # cat "$GITHUB_WORKSPACE/stack.yaml.lock"
    #     # ls
    #     # ls $GITHUB_WORKSPACE
    #   env:
    #     ARGS: ${{ matrix.plan.resolver }}
    #   if: matrix.plan.build == 'stack'

    # - name: Why
    #   run: |
    #     cat "stack.yaml.lock"
    #     cat "$GITHUB_WORKSPACE/stack.yaml.lock"
    #   if: matrix.plan.build == 'stack'

    - name: Setup cabal-install
      uses: actions/setup-haskell@v1
      with:
        ghc-version: ${{ matrix.plan.ghc }}
        cabal-version: ${{ matrix.plan.cabal-install }}
      if: matrix.plan.build == 'cabal'

    - name: Dump matrix context
      run: echo "$MATRIX" > gh_matrix.json
      env:
        MATRIX: ${{ toJson(matrix) }}

    - name: Cache GHC
      uses: actions/cache@preview
      if: matrix.plan.build == 'cabal'
      id: cg
      with:
        path: /home/runner/.ghc
        key: ${{ hashFiles('**/gh_matrix.json') }}-ghc-${{ hashFiles('**/package.yaml') }}
        restore-keys: |
          ${{ hashFiles('**/gh_matrix.json') }}-ghc-

    - name: Cache Cabal
      uses: actions/cache@preview
      if: matrix.plan.build == 'cabal'
      id: cc
      with:
        path: /home/runner/.cabal
        key: ${{ hashFiles('**/gh_matrix.json') }}-cabal-${{ hashFiles('**/package.yaml') }}
        restore-keys: |
          ${{ hashFiles('**/gh_matrix.json') }}-cabal-

    - name: Cache Stack
      uses: actions/cache@preview
      if: matrix.plan.build == 'stack'
      id: cs
      with:
        path: /home/runner/.stack
        key: ${{ hashFiles('**/gh_matrix.json') }}-stack-${{ hashFiles('**/package.yaml')}}-${{hashFiles('**/stack.yaml') }}
        restore-keys: |
          ${{ hashFiles('**/gh_matrix.json') }}-stack-

    - name: Cache Stack Work
      uses: actions/cache@preview
      if: matrix.plan.build == 'stack'
      id: csw
      with:
        path: ${{format('{0}{1}',github.workspace,'/.stack-work')}}
        key: ${{ hashFiles('**/gh_matrix.json') }}-stackwork-${{ hashFiles('**/package.yaml')}}-${{hashFiles('**/stack.yaml') }}
        restore-keys: |
          ${{ hashFiles('**/gh_matrix.json') }}-stackwork-

    - name: Install dependencies
      run: |
        set -ex
        pwd
        case "$BUILD" in
          stack)
            stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
            ;;
          cabal)
            cabal --version
            cabal update
            PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')
            cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
            ;;
        esac
        set +ex
      env:
        ARGS: ${{ matrix.plan.resolver }}
        BUILD: ${{ matrix.plan.build }}

    - name: Build
      run: |
        set -ex
        case "$BUILD" in
          stack)
            stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
            ;;
          cabal)
            PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')
            cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

            ORIGDIR=$(pwd)
            for dir in $PACKAGES
            do
              cd $dir
              cabal check || [ "$CABALVER" == "1.16" ]
              cabal sdist
              PKGVER=$(cabal info . | awk '{print $2;exit}')
              SRC_TGZ=$PKGVER.tar.gz
              cd dist
              tar zxfv "$SRC_TGZ"
              cd "$PKGVER"
              cabal configure --enable-tests --ghc-options -O0
              cabal build
              if [ "$CABALVER" = "1.16" ] || [ "$CABALVER" = "1.18" ]; then
                cabal test
              else
                cabal test --show-details=streaming --log=/dev/stdout
              fi
              cd $ORIGDIR
            done
            ;;
        esac
        set +ex
      env:
        ARGS: ${{ matrix.plan.resolver }}
        BUILD: ${{ matrix.plan.build }}

